tabItems(
# Carte des logements
tabItem(tabName = "cartography",
actionButton("load_data", "Charger les données"),  # Bouton pour charger les données
leafletOutput("Savoie_map", height = "600px")
),
# Onglet Information
tabItem(tabName = "info",
h2("Informations sur les logements"),
p("Détails supplémentaires et analyses générales sur les logements.")
),
# Onglet Données
tabItem(tabName = "data",
h2("Analyse des données"),
fluidRow(
box(plotOutput("scatter_plot"), width = 6),  # Premier graphique (nuage de points)
box(plotOutput("correlation_plot"), width = 6)  # Deuxième graphique (corrélation année/DPE)
)
)
)
)
)
# Fonction pour obtenir la couleur en fonction de l'étiquette DPE
get_color <- function(etiquette) {
switch(etiquette,
"A" = "green",
"B" = "lightgreen",
"C" = "yellow",
"D" = "orange",
"E" = "red",
"F" = "darkred",
"G" = "black",
"grey"  # couleur par défaut si aucune étiquette ne correspond
)
}
# Serveur
server <- function(input, output, session) {
# Initialisation de la carte vide
output$Savoie_map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
setView(lng = 5.9162, lat = 45.6884, zoom = 8)  # Vue initiale de la carte
})
observeEvent(input$load_data, {
load_data()
# Vérification des coordonnées
if (is.null(df_principale$lon) || is.null(df_principale$lat) ||
all(is.na(df_principale$lon)) || all(is.na(df_principale$lat))) {
showNotification("Aucune donnée de localisation valide trouvée.", type = "error")
return(NULL)  # Sortir si les coordonnées sont invalides
}
# Mise à jour de la carte après le chargement des données
output$Savoie_map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addCircleMarkers(
lng = df_principale$lon,  # Utiliser les colonnes appropriées
lat = df_principale$lat,
color = sapply(df_principale$Etiquette_DPE, get_color),  # Couleur selon DPE
radius = 5,
stroke = FALSE,
fillOpacity = 0.6,
popup = paste("Logement ID:", df_principale$`N°DPE`, "<br>",
"Etiquette DPE:", df_principale$Etiquette_DPE, "<br>",
"Date de réception DPE:", df_principale$Date_réception_DPE)
) %>%
setView(lng = 5.9162, lat = 45.6884, zoom = 8)
})
# Premier graphique : Nuage de points pour l'onglet Données
output$scatter_plot <- renderPlot({
ggplot(df_principale, aes(x = lon, y = lat, color = Etiquette_DPE)) +
geom_point() +
labs(title = "Répartition des logements (existants vs neufs)", x = "Longitude", y = "Latitude") +
theme_minimal()
})
# Deuxième graphique : Corrélation entre année de construction et DPE
output$correlation_plot <- renderPlot({
ggplot(df_principale, aes(x = Année_construction, y = Etiquette_DPE, color = Etiquette_DPE)) +
geom_jitter(width = 0.3, height = 0.2) +  # Un peu de jitter pour éviter les points empilés
labs(title = "Corrélation entre Année de construction et DPE", x = "Année de construction", y = "Etiquette DPE") +
theme_minimal()
})
})
# Changer de thème (logique à personnaliser)
observeEvent(input$change_theme, {
shinyjs::runjs("document.body.style.backgroundColor = 'lightblue';")
})
}
# Lancer l'application
shinyApp(ui = ui, server = server)
install.packages(c("shiny", "leaflet", "shinydashboard", "httr", "jsonlite", "ggplot2", "data.table", "shinyjs"))
runApp()
install.packages(c("shiny", "leaflet", "shinydashboard", "httr", "jsonlite", "ggplot2", "data.table", "shinyjs"))
shiny::runApp()
# Ajouter un miroir CRAN pour éviter l'erreur sur shinyapps.io
options(repos = c(CRAN = "https://cran.rstudio.com/"))
install.packages(c('shiny', 'leaflet', 'shinydashboard', 'httr', 'jsonlite', 'ggplot2', 'data.table', 'shinyjs'))
library(shiny)
library(leaflet)
library(shinydashboard)
library(httr)
library(jsonlite)
library(ggplot2)
library(data.table)
library(shinyjs)
# Lecture du fichier CSV local
adresse <- read.csv(file = "adresses-73.csv", header = TRUE, sep = ";", dec = ".")
# Variables et URLs API
code_postal <- "73*"
size <- 10000
df_existants <- data.table()
df_neufs <- data.table()
Date_existants <- 2021
Date_neufs <- 2021
base_url_existants <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
base_url_neufs <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-neufs/lines"
# Fonction pour charger les données
load_data <- function() {
# Récupération des données depuis l'API
# Pour logements existants
repeat {
params <- list(
page = 1,
size = size,
select = "N°DPE,Etiquette_DPE,Date_réception_DPE,Coordonnée_cartographique_Y_(BAN),Coordonnée_cartographique_X_(BAN),Identifiant__BAN",
q = code_postal,
q_fields = "Code_postal_(BAN)",
qs = paste0("Date_réception_DPE:[", Date_existants, "-01-01 TO ", Date_existants, "-12-31]")
)
url_encoded <- modify_url(base_url_existants, query = params)
response <- GET(url_encoded, timeout(60))
if (status_code(response) != 200) {
stop("Erreur dans la requête : ", status_code(response))
}
content <- fromJSON(rawToChar(response$content), flatten = FALSE)
data <- content$result
df_existants <<- rbind(df_existants, data)
Date_existants <<- Date_existants + 1
if (Date_existants == 2030) {
break
}
Sys.sleep(2)
}
# Pour logements neufs
repeat {
params <- list(
page = 1,
size = size,
select = "N°DPE,Etiquette_DPE,Date_réception_DPE,Coordonnée_cartographique_Y_(BAN),Coordonnée_cartographique_X_(BAN),Identifiant__BAN",
q = code_postal,
q_fields = "Code_postal_(BAN)",
qs = paste0("Date_réception_DPE:[", Date_neufs, "-01-01 TO ", Date_neufs, "-12-31]")
)
url_encoded <- modify_url(base_url_neufs, query = params)
response <- GET(url_encoded, timeout(60))
if (status_code(response) != 200) {
stop("Erreur dans la requête : ", status_code(response))
}
content <- fromJSON(rawToChar(response$content), flatten = FALSE)
data <- content$result
df_neufs <<- rbind(df_neufs, data)
Date_neufs <<- Date_neufs + 1
if (Date_neufs == 2030) {
break
}
Sys.sleep(2)
}
print(colnames(adresse))  # Affiche les noms des colonnes du fichier adresse
df_existants$type_logement <- "Existant"
df_neufs$type_logement <- "Neufs"
df_logement <- rbind(df_existants, df_neufs)
df_logement <- df_logement[!is.na(df_logement$'Coordonnée_cartographique_X_(BAN)') &
!is.na(df_logement$'Coordonnée_cartographique_Y_(BAN)'), ]
print(colnames(df_logement))  # Affiche les noms des colonnes de df_logement
# Transformation des coordonnées en numérique pour les deux datatables
df_logement$'Coordonnée_cartographique_X_(BAN)' <- as.numeric(df_logement$'Coordonnée_cartographique_X_(BAN)')
df_logement$'Coordonnée_cartographique_Y_(BAN)' <- as.numeric(df_logement$'Coordonnée_cartographique_Y_(BAN)')
adresse$lon <- as.numeric(adresse$lon)  # Assurez-vous que les noms des colonnes sont corrects
adresse$lat <- as.numeric(adresse$lat)
# Utiliser les coordonnées du fichier adresse pour la jointure
df_principale <<- merge(df_logement, adresse,
by.x = c("Coordonnée_cartographique_X_(BAN)", "Coordonnée_cartographique_Y_(BAN)"),
by.y = c("lon", "lat"),
all.x = TRUE)
print(paste("Données chargées : ", nrow(df_principale), " lignes"))  # Confirmer que les données sont bien chargées
showNotification("Données chargées avec succès", type = "message")  # Notification de succès
}
# Interface utilisateur (UI)
ui <- dashboardPage(
dashboardHeader(
title = tags$div(
tags$img(src = "73_Logement.png", height = '40px'),  # Modifiez le chemin si nécessaire
"Logements en Savoie"
)
),
dashboardSidebar(
sidebarMenu(
menuItem("Cartographie", tabName = "cartography", icon = icon("map")),
menuItem("Informations", tabName = "info", icon = icon("info-circle")),
menuItem("Données", tabName = "data", icon = icon("table"))
)
),
dashboardBody(
useShinyjs(),  # Activer shinyjs
tabItems(
# Carte des logements
tabItem(tabName = "cartography",
actionButton("load_data", "Charger les données"),  # Bouton pour charger les données
leafletOutput("Savoie_map", height = "600px")
),
# Onglet Information
tabItem(tabName = "info",
h2("Informations sur les logements"),
p("Détails supplémentaires et analyses générales sur les logements.")
),
# Onglet Données
tabItem(tabName = "data",
h2("Analyse des données"),
fluidRow(
box(plotOutput("scatter_plot"), width = 6),  # Premier graphique (nuage de points)
box(plotOutput("correlation_plot"), width = 6)  # Deuxième graphique (corrélation année/DPE)
)
)
)
)
)
# Fonction pour obtenir la couleur en fonction de l'étiquette DPE
get_color <- function(etiquette) {
switch(etiquette,
"A" = "green",
"B" = "lightgreen",
"C" = "yellow",
"D" = "orange",
"E" = "red",
"F" = "darkred",
"G" = "black",
"grey"  # couleur par défaut si aucune étiquette ne correspond
)
}
# Serveur
server <- function(input, output, session) {
# Initialisation de la carte vide
output$Savoie_map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
setView(lng = 5.9162, lat = 45.6884, zoom = 8)  # Vue initiale de la carte
})
observeEvent(input$load_data, {
load_data()
# Vérification des coordonnées
if (is.null(df_principale$lon) || is.null(df_principale$lat) ||
all(is.na(df_principale$lon)) || all(is.na(df_principale$lat))) {
showNotification("Aucune donnée de localisation valide trouvée.", type = "error")
return(NULL)  # Sortir si les coordonnées sont invalides
}
# Mise à jour de la carte après le chargement des données
output$Savoie_map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addCircleMarkers(
lng = df_principale$lon,  # Utiliser les colonnes appropriées
lat = df_principale$lat,
color = sapply(df_principale$Etiquette_DPE, get_color),  # Couleur selon DPE
radius = 5,
stroke = FALSE,
fillOpacity = 0.6,
popup = paste("Logement ID:", df_principale$`N°DPE`, "<br>",
"Etiquette DPE:", df_principale$Etiquette_DPE, "<br>",
"Date de réception DPE:", df_principale$Date_réception_DPE)
) %>%
setView(lng = 5.9162, lat = 45.6884, zoom = 8)
})
# Premier graphique : Nuage de points pour l'onglet Données
output$scatter_plot <- renderPlot({
ggplot(df_principale, aes(x = lon, y = lat, color = Etiquette_DPE)) +
geom_point() +
labs(title = "Répartition des logements (existants vs neufs)", x = "Longitude", y = "Latitude") +
theme_minimal()
})
# Deuxième graphique : Corrélation entre année de construction et DPE
output$correlation_plot <- renderPlot({
ggplot(df_principale, aes(x = Année_construction, y = Etiquette_DPE, color = Etiquette_DPE)) +
geom_jitter(width = 0.3, height = 0.2) +  # Un peu de jitter pour éviter les points empilés
labs(title = "Corrélation entre Année de construction et DPE", x = "Année de construction", y = "Etiquette DPE") +
theme_minimal()
})
})
# Changer de thème (logique à personnaliser)
observeEvent(input$change_theme, {
shinyjs::runjs("document.body.style.backgroundColor = 'lightblue';")
})
}
# Lancer l'application
shinyApp(ui = ui, server = server)
# Ajouter un miroir CRAN pour éviter l'erreur sur shinyapps.io
options(repos = c(CRAN = "https://cran.rstudio.com/"))
install.packages(c('shiny', 'leaflet', 'shinydashboard', 'httr', 'jsonlite', 'ggplot2', 'data.table', 'shinyjs'))
library(shiny)
library(leaflet)
library(shinydashboard)
library(httr)
library(jsonlite)
library(ggplot2)
library(data.table)
library(shinyjs)
# Lecture du fichier CSV local
adresse <- read.csv(file = "adresses-73.csv", header = TRUE, sep = ";", dec = ".")
# Variables et URLs API
code_postal <- "73*"
size <- 10000
df_existants <- data.table()
df_neufs <- data.table()
Date_existants <- 2021
Date_neufs <- 2021
base_url_existants <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
base_url_neufs <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-neufs/lines"
# Fonction pour charger les données
load_data <- function() {
# Récupération des données depuis l'API
# Pour logements existants
repeat {
params <- list(
page = 1,
size = size,
select = "N°DPE,Etiquette_DPE,Date_réception_DPE,Coordonnée_cartographique_Y_(BAN),Coordonnée_cartographique_X_(BAN),Identifiant__BAN",
q = code_postal,
q_fields = "Code_postal_(BAN)",
qs = paste0("Date_réception_DPE:[", Date_existants, "-01-01 TO ", Date_existants, "-12-31]")
)
url_encoded <- modify_url(base_url_existants, query = params)
response <- GET(url_encoded, timeout(60))
if (status_code(response) != 200) {
stop("Erreur dans la requête : ", status_code(response))
}
content <- fromJSON(rawToChar(response$content), flatten = FALSE)
data <- content$result
df_existants <<- rbind(df_existants, data)
Date_existants <<- Date_existants + 1
if (Date_existants == 2030) {
break
}
Sys.sleep(2)
}
# Pour logements neufs
repeat {
params <- list(
page = 1,
size = size,
select = "N°DPE,Etiquette_DPE,Date_réception_DPE,Coordonnée_cartographique_Y_(BAN),Coordonnée_cartographique_X_(BAN),Identifiant__BAN",
q = code_postal,
q_fields = "Code_postal_(BAN)",
qs = paste0("Date_réception_DPE:[", Date_neufs, "-01-01 TO ", Date_neufs, "-12-31]")
)
url_encoded <- modify_url(base_url_neufs, query = params)
response <- GET(url_encoded, timeout(60))
if (status_code(response) != 200) {
stop("Erreur dans la requête : ", status_code(response))
}
content <- fromJSON(rawToChar(response$content), flatten = FALSE)
data <- content$result
df_neufs <<- rbind(df_neufs, data)
Date_neufs <<- Date_neufs + 1
if (Date_neufs == 2030) {
break
}
Sys.sleep(2)
}
print(colnames(adresse))  # Affiche les noms des colonnes du fichier adresse
df_existants$type_logement <- "Existant"
df_neufs$type_logement <- "Neufs"
df_logement <- rbind(df_existants, df_neufs)
df_logement <- df_logement[!is.na(df_logement$'Coordonnée_cartographique_X_(BAN)') &
!is.na(df_logement$'Coordonnée_cartographique_Y_(BAN)'), ]
print(colnames(df_logement))  # Affiche les noms des colonnes de df_logement
# Transformation des coordonnées en numérique pour les deux datatables
df_logement$'Coordonnée_cartographique_X_(BAN)' <- as.numeric(df_logement$'Coordonnée_cartographique_X_(BAN)')
df_logement$'Coordonnée_cartographique_Y_(BAN)' <- as.numeric(df_logement$'Coordonnée_cartographique_Y_(BAN)')
adresse$lon <- as.numeric(adresse$lon)  # Assurez-vous que les noms des colonnes sont corrects
adresse$lat <- as.numeric(adresse$lat)
# Utiliser les coordonnées du fichier adresse pour la jointure
df_principale <<- merge(df_logement, adresse,
by.x = c("Coordonnée_cartographique_X_(BAN)", "Coordonnée_cartographique_Y_(BAN)"),
by.y = c("lon", "lat"),
all.x = TRUE)
print(paste("Données chargées : ", nrow(df_principale), " lignes"))  # Confirmer que les données sont bien chargées
showNotification("Données chargées avec succès", type = "message")  # Notification de succès
}
# Interface utilisateur (UI)
ui <- dashboardPage(
dashboardHeader(
title = tags$div(
tags$img(src = "73_Logement.png", height = '40px'),  # Modifiez le chemin si nécessaire
"Logements en Savoie"
)
),
dashboardSidebar(
sidebarMenu(
menuItem("Cartographie", tabName = "cartography", icon = icon("map")),
menuItem("Informations", tabName = "info", icon = icon("info-circle")),
menuItem("Données", tabName = "data", icon = icon("table"))
)
),
dashboardBody(
useShinyjs(),  # Activer shinyjs
tabItems(
# Carte des logements
tabItem(tabName = "cartography",
actionButton("load_data", "Charger les données"),  # Bouton pour charger les données
leafletOutput("Savoie_map", height = "600px")
),
# Onglet Information
tabItem(tabName = "info",
h2("Informations sur les logements"),
p("Détails supplémentaires et analyses générales sur les logements.")
),
# Onglet Données
tabItem(tabName = "data",
h2("Analyse des données"),
fluidRow(
box(plotOutput("scatter_plot"), width = 6),  # Premier graphique (nuage de points)
box(plotOutput("correlation_plot"), width = 6)  # Deuxième graphique (corrélation année/DPE)
)
)
)
)
)
# Fonction pour obtenir la couleur en fonction de l'étiquette DPE
get_color <- function(etiquette) {
switch(etiquette,
"A" = "green",
"B" = "lightgreen",
"C" = "yellow",
"D" = "orange",
"E" = "red",
"F" = "darkred",
"G" = "black",
"grey"  # couleur par défaut si aucune étiquette ne correspond
)
}
# Serveur
server <- function(input, output, session) {
# Initialisation de la carte vide
output$Savoie_map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
setView(lng = 5.9162, lat = 45.6884, zoom = 8)  # Vue initiale de la carte
})
observeEvent(input$load_data, {
load_data()
# Vérification des coordonnées
if (is.null(df_principale$lon) || is.null(df_principale$lat) ||
all(is.na(df_principale$lon)) || all(is.na(df_principale$lat))) {
showNotification("Aucune donnée de localisation valide trouvée.", type = "error")
return(NULL)  # Sortir si les coordonnées sont invalides
}
# Mise à jour de la carte après le chargement des données
output$Savoie_map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addCircleMarkers(
lng = df_principale$lon,  # Utiliser les colonnes appropriées
lat = df_principale$lat,
color = sapply(df_principale$Etiquette_DPE, get_color),  # Couleur selon DPE
radius = 5,
stroke = FALSE,
fillOpacity = 0.6,
popup = paste("Logement ID:", df_principale$`N°DPE`, "<br>",
"Etiquette DPE:", df_principale$Etiquette_DPE, "<br>",
"Date de réception DPE:", df_principale$Date_réception_DPE)
) %>%
setView(lng = 5.9162, lat = 45.6884, zoom = 8)
})
# Premier graphique : Nuage de points pour l'onglet Données
output$scatter_plot <- renderPlot({
ggplot(df_principale, aes(x = lon, y = lat, color = Etiquette_DPE)) +
geom_point() +
labs(title = "Répartition des logements (existants vs neufs)", x = "Longitude", y = "Latitude") +
theme_minimal()
})
# Deuxième graphique : Corrélation entre année de construction et DPE
output$correlation_plot <- renderPlot({
ggplot(df_principale, aes(x = Année_construction, y = Etiquette_DPE, color = Etiquette_DPE)) +
geom_jitter(width = 0.3, height = 0.2) +  # Un peu de jitter pour éviter les points empilés
labs(title = "Corrélation entre Année de construction et DPE", x = "Année de construction", y = "Etiquette DPE") +
theme_minimal()
})
})
# Changer de thème (logique à personnaliser)
observeEvent(input$change_theme, {
shinyjs::runjs("document.body.style.backgroundColor = 'lightblue';")
})
}
# Lancer l'application
shinyApp(ui = ui, server = server)
install.packages(c("shiny", "leaflet", "shinydashboard", "httr", "jsonlite", "ggplot2", "data.table", "shinyjs"))
View(df_existants)
View(df_existants)
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
install.packages(c("shiny", "leaflet", "shinydashboard", "httr", "jsonlite", "ggplot2", "leaflet.extras", "shinyjs", "rsconnect"))
runApp()
install.packages(c("shiny", "leaflet", "shinydashboard", "httr", "jsonlite", "ggplot2", "leaflet.extras", "shinyjs", "rsconnect"))
runApp()
install.packages(c("shiny", "leaflet", "shinydashboard", "httr", "jsonlite", "ggplot2", "leaflet.extras", "shinyjs", "rsconnect"))
runApp()
install.packages(c("shiny", "leaflet", "shinydashboard", "httr", "jsonlite", "ggplot2", "leaflet.extras", "shinyjs", "rsconnect"))
runApp()
install.packages(c("shiny", "leaflet", "shinydashboard", "httr", "jsonlite", "ggplot2", "leaflet.extras", "shinyjs", "rsconnect"))
shiny::runApp()
install.packages(c("shiny", "leaflet", "shinydashboard", "httr", "jsonlite", "ggplot2", "leaflet.extras", "shinyjs", "rsconnect"))
