TRUE ~ NA_real_
))
# Calculer la corrélation
correlation <- cor(df_logement$Etiquette_DPE_numeric, df_logement$Qualité_isolation_murs, use = "complete.obs")
# Graphique à barres pour comparer l'Étiquette DPE avec la Qualité d'Isolation des Murs
ggplot(df_logement, aes(x = Etiquette_DPE, fill = Qualité_isolation_murs)) +
geom_bar(position = "dodge") +  # Positionner les barres côte à côte
theme_minimal() +
labs(title = "Comparaison de l'Étiquette DPE et de la Qualité d'Isolation des Murs",
x = "Étiquette DPE",
y = "Nombre de Logements",
fill = "Qualité d'Isolation des Murs") +
theme(legend.position = "right")  # Positionner la légende à droite
# Créer un nuage de points pour la surface habitable en fonction de l'étiquette DPE
ggplot(df_logement, aes(x = Etiquette_DPE,
y = Surface_habitable_logement,
color = Type_bâtiment)) +
geom_point(alpha = 0.6, size = 2) +  # alpha pour la transparence, size pour la taille des points
theme_minimal() +
labs(title = "Nuage de Points: Surface Habitable par Type de Bâtiment",
x = "Étiquette DPE",
y = "Surface Habitable (m²)",
color = "Type de Bâtiment") +
theme(legend.position = "right")  # Positionner la légende à droite
# Graphique à barres pour comparer l'Étiquette DPE avec la Qualité d'Isolation des Murs
ggplot(df_logement, aes(x = Etiquette_DPE, fill = Qualité_isolation_murs)) +
geom_bar(position = "dodge") +  # Positionner les barres côte à côte
theme_minimal() +
labs(title = "Comparaison de l'Étiquette DPE et de la Qualité d'Isolation des Murs",
x = "Étiquette DPE",
y = "Nombre de Logements",
fill = "Qualité d'Isolation des Murs") +
theme(legend.position = "right")  # Positionner la légende à droite
# Graphique à barres pour comparer l'Étiquette DPE avec la Qualité d'Isolation des Murs
ggplot(df_logement, aes(x = Etiquette_DPE, fill = Qualité_isolation_murs)) +
geom_bar(position = "dodge") +  # Positionner les barres côte à côte
theme_minimal() +
labs(title = "Comparaison de l'Étiquette DPE et de la Qualité d'Isolation des Murs",
x = "Étiquette DPE",
y = "Nombre de Logements",
fill = "Qualité d'Isolation des Murs") +
theme(legend.position = "right")  # Positionner la légende à droite
# Convertir l'Étiquette DPE en numérique
df_logement <- df_logement %>%
mutate(Etiquette_DPE_numeric = case_when(
Etiquette_DPE == "A" ~ 7,
Etiquette_DPE == "B" ~ 6,
Etiquette_DPE == "C" ~ 5,
Etiquette_DPE == "D" ~ 4,
Etiquette_DPE == "E" ~ 3,
Etiquette_DPE == "F" ~ 2,
Etiquette_DPE == "G" ~ 1,
TRUE ~ NA_real_
))
# Vérifier et convertir la colonne Qualité_isolation_murs en numérique si nécessaire
df_logement$Qualité_isolation_murs <- as.numeric(as.character(df_logement$Qualité_isolation_murs))
# Filtrer les lignes avec des valeurs complètes pour les deux variables
df_complet <- df_logement %>%
filter(!is.na(Etiquette_DPE_numeric) & !is.na(Qualité_isolation_murs))
# Calculer la corrélation entre l'Étiquette DPE et la Qualité d'Isolation des Murs
correlation <- cor(df_complet$Etiquette_DPE_numeric, df_complet$Qualité_isolation_murs, use = "complete.obs")
# Convertir l'étiquette DPE en valeurs numériques
df_logement$DPE_numeric <- as.numeric(factor(df_logement$Etiquette_DPE,
levels = c("A", "B", "C", "D", "E", "F", "G")))
# Calculer la corrélation
correlation <- cor(df_logement$Surface_habitable_logement, df_logement$DPE_numeric, use = "complete.obs")
print(correlation)
View(df_complet)
# Convertir l'Étiquette DPE en numérique
df_logement <- df_logement %>%
mutate(Etiquette_DPE_numeric = case_when(
Etiquette_DPE == "A" ~ 7,
Etiquette_DPE == "B" ~ 6,
Etiquette_DPE == "C" ~ 5,
Etiquette_DPE == "D" ~ 4,
Etiquette_DPE == "E" ~ 3,
Etiquette_DPE == "F" ~ 2,
Etiquette_DPE == "G" ~ 1,
TRUE ~ NA_real_
))
# Vérifier et convertir la colonne Qualité_isolation_murs en numérique si nécessaire
df_logement$Qualité_isolation_murs <- as.numeric(as.character(df_logement$Qualité_isolation_murs))
# Filtrer les lignes avec des valeurs complètes pour les deux variables
df_complet <- df_logement %>%
filter(!is.na(Etiquette_DPE_numeric) & !is.na(Qualité_isolation_murs))
# Calculer la corrélation entre l'Étiquette DPE et la Qualité d'Isolation des Murs
correlation <- cor(df_logement$Etiquette_DPE_numeric, df_logement$Qualité_isolation_murs, use = "complete.obs")
View(df_logement)
View(df_existants)
View(df_neufs)
# Graphique à barres pour comparer l'Étiquette DPE avec la Qualité d'Isolation des Murs
ggplot(df_logement, aes(x = Etiquette_DPE, fill = Qualité_isolation_murs)) +
geom_bar(position = "dodge") +  # Positionner les barres côte à côte
theme_minimal() +
labs(title = "Comparaison de l'Étiquette DPE et de la Qualité d'Isolation des Murs",
x = "Étiquette DPE",
y = "Nombre de Logements",
fill = "Qualité d'Isolation des Murs")
theme(legend.position = "right")  # Positionner la légende à droite
knitr::opts_chunk$set(echo = TRUE)
library(httr)
library(jsonlite)
library(dplyr)
library(ggplot2)
code_postal <- "73*"
size <- 10000  # Taille des paquets
df_existants <- data.frame()  # Dataframe pour stocker les résultats des logements existants
Date_existants <- 2021  # Filtrer à partir de cette date
base_url_existants <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
repeat {
params <- list(
page = 1,
size = size,
select = "N°DPE,Etiquette_DPE,Date_réception_DPE,Coordonnée_cartographique_Y_(BAN),Coordonnée_cartographique_X_(BAN),Identifiant__BAN,Année_construction,Type_bâtiment,Type_installation_chauffage,Surface_habitable_logement,Qualité_isolation_murs",
q = code_postal,
q_fields = "Code_postal_(BAN)",
qs = paste0("Date_réception_DPE:[", Date_existants, "-01-01 TO ", Date_existants, "-12-31]")
)
url_encoded <- modify_url(base_url_existants, query = params)
response <- GET(url_encoded)
if (status_code(response) != 200) {
stop("Erreur dans la requête : ", status_code(response))
}
content <- fromJSON(rawToChar(response$content), flatten = FALSE)
data <- content$result
df_existants <- rbind(df_existants, data)
Date_existants <- Date_existants + 1
if (Date_existants == 2030) break
Sys.sleep(1)  # Pause de 1 seconde entre les requêtes
}
df_existants$type_logement <- "Existant"
df_neufs <- data.frame()  # Dataframe pour stocker les résultats des logements neufs
Date_neufs <- 2021
base_url_neufs <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-neufs/lines"
repeat {
params <- list(
page = 1,
size = size,
select = "N°DPE,Etiquette_DPE,Date_réception_DPE,Coordonnée_cartographique_Y_(BAN),Coordonnée_cartographique_X_(BAN),Identifiant__BAN,Type_bâtiment,Type_installation_chauffage,Surface_habitable_logement,Qualité_isolation_murs",
q = code_postal,
q_fields = "Code_postal_(BAN)",
qs = paste0("Date_réception_DPE:[", Date_neufs, "-01-01 TO ", Date_neufs, "-12-31]")
)
url_encoded <- modify_url(base_url_neufs, query = params)
response <- GET(url_encoded)
if (status_code(response) != 200) {
stop("Erreur dans la requête : ", status_code(response))
}
content <- fromJSON(rawToChar(response$content), flatten = FALSE)
data <- content$result
df_neufs <- rbind(df_neufs, data)
Date_neufs <- Date_neufs + 1
if (Date_neufs == 2030) break
Sys.sleep(1)  # Pause de 1 seconde entre les requêtes
}
df_neufs$type_logement = "Neufs"
df_neufs$Année_construction = NA
df_logement <- rbind(df_existants, df_neufs)
# Nettoyage des données
df_logement <- df_logement[!is.na(df_logement$`Coordonnée_cartographique_X_(BAN)`) &
!is.na(df_logement$`Coordonnée_cartographique_Y_(BAN)`), ]
kpi_type <- df_logement %>%
group_by(type_logement) %>%
summarise(count = n())
ggplot(kpi_type, aes(x = type_logement, y = count, fill = type_logement)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Répartition des logements par type", y = "Nombre de logements", x = "")
# Créer une palette de couleurs pour les étiquettes DPE
colors_dpe <- c(
"A" = "#006400",  # Vert foncé
"B" = "#32CD32",  # Vert clair
"C" = "#ADFF2F",  # Vert jaune
"D" = "#FFD700",  # Jaune
"E" = "#FFA500",  # Orange
"F" = "#FF8C00",  # Orange foncé
"G" = "#FF0000"   # Rouge
)
# Calcul des KPI pour les étiquettes DPE et garder l'ordre de A à G
kpi_dpe <- df_logement %>%
group_by(Etiquette_DPE) %>%
summarise(count = n()) %>%
arrange(desc(count))
# Transformer la colonne Etiquette_DPE en facteur avec l'ordre souhaité
kpi_dpe$Etiquette_DPE <- factor(kpi_dpe$Etiquette_DPE, levels = c("G", "F", "E", "D", "C", "B", "A"))
# Visualisation avec barres horizontales et couleurs personnalisées
ggplot(kpi_dpe, aes(x = Etiquette_DPE, y = count, fill = Etiquette_DPE)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = colors_dpe) +  # Appliquer les couleurs personnalisées
coord_flip() +  # Faire en sorte que les barres soient horizontales
theme_minimal() +
labs(title = "Distribution des étiquettes DPE", y = "Nombre de logements", x = "Etiquette DPE")
# Convertir l'étiquette DPE en une variable numérique
df_existants$DPE_num <- as.numeric(factor(df_existants$Etiquette_DPE, levels = c("A", "B", "C", "D", "E", "F", "G")))
# Calcul de la corrélation entre l'année de construction et l'étiquette DPE
correlation <- cor(df_existants$Année_construction, df_existants$DPE_num, use = "complete.obs")
correlation
# Calcul de la répartition des types d'installation de chauffage
kpi_chauffage <- df_logement %>%
group_by(Type_installation_chauffage) %>%
summarise(count = n()) %>%
mutate(percentage = round((count / sum(count)) * 100, 2)) %>%
arrange(desc(count))
# Affichage du KPI
print(kpi_chauffage)
# Visualisation de la répartition par type d'installation de chauffage
ggplot(kpi_chauffage, aes(x = reorder(Type_installation_chauffage, -count), y = percentage, fill = Type_installation_chauffage)) +
geom_bar(stat = "identity") +
coord_flip() +  # Pour un graphique horizontal
theme_minimal() +
labs(title = "Répartition des types d'installation de chauffage",
y = "Pourcentage", x = "Type d'installation de chauffage") +
theme(legend.position = "none")
# Encodage en numerique
df_existants$Chauffage_code <- as.numeric(as.factor(df_existants$Type_installation_chauffage))
# Calculer
correlation_chauffage_annee <- cor(df_existants$Chauffage_code, df_existants$Année_construction, use = "complete.obs")
# Corrélation entre le type de chauffage et l'étiquette DPE
df_existants$Etiquette_DPE_code <- as.numeric(as.factor(df_existants$Etiquette_DPE))
correlation_chauffage_dpe <- cor(df_existants$Chauffage_code, df_existants$Etiquette_DPE_code, use = "complete.obs")
cat("Corrélation entre le type de chauffage et l'étiquette DPE :", correlation_chauffage_dpe, "\n")
# Créer un nuage de points pour la surface habitable en fonction de l'étiquette DPE
ggplot(df_logement, aes(x = Etiquette_DPE,
y = Surface_habitable_logement,
color = Type_bâtiment)) +
geom_point(alpha = 0.6, size = 2) +  # alpha pour la transparence, size pour la taille des points
theme_minimal() +
labs(title = "Nuage de Points: Surface Habitable par Type de Bâtiment",
x = "Étiquette DPE",
y = "Surface Habitable (m²)",
color = "Type de Bâtiment") +
theme(legend.position = "right")  # Positionner la légende à droite
# Convertir l'étiquette DPE en valeurs numériques
df_logement$DPE_numeric <- as.numeric(factor(df_logement$Etiquette_DPE,
levels = c("A", "B", "C", "D", "E", "F", "G")))
# Calculer la corrélation
correlation <- cor(df_logement$Surface_habitable_logement, df_logement$DPE_numeric, use = "complete.obs")
print(correlation)
knitr::opts_chunk$set(echo = TRUE)
library(httr)
library(jsonlite)
library(dplyr)
library(ggplot2)
code_postal <- "73*"
size <- 10000  # Taille des paquets
df_existants <- data.frame()  # Dataframe pour stocker les résultats des logements existants
Date_existants <- 2021  # Filtrer à partir de cette date
base_url_existants <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
repeat {
params <- list(
page = 1,
size = size,
select = "N°DPE,Etiquette_DPE,Date_réception_DPE,Coordonnée_cartographique_Y_(BAN),Coordonnée_cartographique_X_(BAN),Identifiant__BAN,Année_construction,Type_bâtiment,Type_installation_chauffage,Surface_habitable_logement",
q = code_postal,
q_fields = "Code_postal_(BAN)",
qs = paste0("Date_réception_DPE:[", Date_existants, "-01-01 TO ", Date_existants, "-12-31]")
)
url_encoded <- modify_url(base_url_existants, query = params)
response <- GET(url_encoded)
if (status_code(response) != 200) {
stop("Erreur dans la requête : ", status_code(response))
}
content <- fromJSON(rawToChar(response$content), flatten = FALSE)
data <- content$result
df_existants <- rbind(df_existants, data)
Date_existants <- Date_existants + 1
if (Date_existants == 2030) break
Sys.sleep(1)  # Pause de 1 seconde entre les requêtes
}
df_existants$type_logement <- "Existant"
df_neufs <- data.frame()  # Dataframe pour stocker les résultats des logements neufs
Date_neufs <- 2021
base_url_neufs <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-neufs/lines"
repeat {
params <- list(
page = 1,
size = size,
select = "N°DPE,Etiquette_DPE,Date_réception_DPE,Coordonnée_cartographique_Y_(BAN),Coordonnée_cartographique_X_(BAN),Identifiant__BAN,Type_bâtiment,Type_installation_chauffage,Surface_habitable_logement",
q = code_postal,
q_fields = "Code_postal_(BAN)",
qs = paste0("Date_réception_DPE:[", Date_neufs, "-01-01 TO ", Date_neufs, "-12-31]")
)
url_encoded <- modify_url(base_url_neufs, query = params)
response <- GET(url_encoded)
if (status_code(response) != 200) {
stop("Erreur dans la requête : ", status_code(response))
}
content <- fromJSON(rawToChar(response$content), flatten = FALSE)
data <- content$result
df_neufs <- rbind(df_neufs, data)
Date_neufs <- Date_neufs + 1
if (Date_neufs == 2030) break
Sys.sleep(1)  # Pause de 1 seconde entre les requêtes
}
df_neufs$type_logement = "Neufs"
df_neufs$Année_construction = NA
df_logement <- rbind(df_existants, df_neufs)
# Nettoyage des données
df_logement <- df_logement[!is.na(df_logement$`Coordonnée_cartographique_X_(BAN)`) &
!is.na(df_logement$`Coordonnée_cartographique_Y_(BAN)`), ]
kpi_type <- df_logement %>%
group_by(type_logement) %>%
summarise(count = n())
ggplot(kpi_type, aes(x = type_logement, y = count, fill = type_logement)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Répartition des logements par type", y = "Nombre de logements", x = "")
# Convertir l'Étiquette DPE en numérique pour les deux types de logements
df_logement <- df_logement %>%
mutate(Etiquette_DPE_numeric = case_when(
Etiquette_DPE == "A" ~ 7,
Etiquette_DPE == "B" ~ 6,
Etiquette_DPE == "C" ~ 5,
Etiquette_DPE == "D" ~ 4,
Etiquette_DPE == "E" ~ 3,
Etiquette_DPE == "F" ~ 2,
Etiquette_DPE == "G" ~ 1,
TRUE ~ NA_real_
))
# Séparer les logements existants et neufs
df_existants_corr <- df_logement %>%
filter(type_logement == "Existant" & !is.na(Etiquette_DPE_numeric))
df_neufs_corr <- df_logement %>%
filter(type_logement == "Neufs" & !is.na(Etiquette_DPE_numeric))
# Calculer la moyenne des étiquettes DPE pour les deux types de logements
mean_existants <- mean(df_existants_corr$Etiquette_DPE_numeric, na.rm = TRUE)
mean_neufs <- mean(df_neufs_corr$Etiquette_DPE_numeric, na.rm = TRUE)
# Créer une dataframe pour comparer les deux moyennes
df_comparaison <- data.frame(
Type_logement = c("Existants", "Neufs"),
Moyenne_DPE = c(mean_existants, mean_neufs)
)
# Afficher les résultats
df_comparaison
# Calculer la corrélation entre les types de logements et les étiquettes DPE
correlation <- cor(df_existants_corr$Etiquette_DPE_numeric, df_neufs_corr$Etiquette_DPE_numeric, use = "complete.obs")
View(df_logement)
# Créer un graphique à barres empilées pour comparer les étiquettes DPE
ggplot(df_logement, aes(x = Etiquette_DPE, fill = type_logement)) +
geom_bar(position = "dodge") +  # position = "dodge" pour des barres côte à côte
theme_minimal() +
labs(title = "Comparaison des étiquettes DPE entre les logements existants et neufs",
x = "Etiquette DPE",
y = "Nombre de logements",
fill = "Type de logement") +
theme(legend.position = "right")
code_postal <- params$code_postal
type_logement <- params$type_logement
size <- 10000  # Taille des paquets
# Créer des dataframes vides pour stocker les résultats
df_existants <- data.frame()
df_neufs <- data.frame()
# Récupération des logements existants si le type sélectionné est "ancien" ou "les deux"
if (type_logement == "ancien" || type_logement == "les deux") {
Date_existants <- 2021  # Filtrer à partir de cette date
base_url_existants <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
repeat {
params_existants <- list(
page = 1,
size = size,
select = "N°DPE,Etiquette_DPE,Date_réception_DPE,Coordonnée_cartographique_Y_(BAN),Coordonnée_cartographique_X_(BAN),Identifiant__BAN,Année_construction,Type_bâtiment,Type_installation_chauffage,Surface_habitable_logement",
q = code_postal,
q_fields = "Code_postal_(BAN)",
qs = paste0("Date_réception_DPE:[", Date_existants, "-01-01 TO ", Date_existants, "-12-31]")
)
url_encoded_existants <- modify_url(base_url_existants, query = params_existants)
response_existants <- GET(url_encoded_existants)
if (status_code(response_existants) != 200) {
stop("Erreur dans la requête : ", status_code(response_existants))
}
content_existants <- fromJSON(rawToChar(response_existants$content), flatten = FALSE)
data_existants <- content_existants$result
df_existants <- rbind(df_existants, data_existants)
Date_existants <- Date_existants + 1
if (Date_existants == 2030) break
Sys.sleep(1)  # Pause de 1 seconde entre les requêtes
}
df_existants$type_logement <- "Existant"
}
# Récupération des logements neufs si le type sélectionné est "neuf" ou "les deux"
if (type_logement == "neuf" || type_logement == "les deux") {
Date_neufs <- 2021
base_url_neufs <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-neufs/lines"
repeat {
params_neufs <- list(
page = 1,
size = size,
select = "N°DPE,Etiquette_DPE,Date_réception_DPE,Coordonnée_cartographique_Y_(BAN),Coordonnée_cartographique_X_(BAN),Identifiant__BAN,Type_bâtiment,Type_installation_chauffage,Surface_habitable_logement",
q = code_postal,
q_fields = "Code_postal_(BAN)",
qs = paste0("Date_réception_DPE:[", Date_neufs, "-01-01 TO ", Date_neufs, "-12-31]")
)
url_encoded_neufs <- modify_url(base_url_neufs, query = params_neufs)
response_neufs <- GET(url_encoded_neufs)
if (status_code(response_neufs) != 200) {
stop("Erreur dans la requête : ", status_code(response_neufs))
}
content_neufs <- fromJSON(rawToChar(response_neufs$content), flatten = FALSE)
data_neufs <- content_neufs$result
df_neufs <- rbind(df_neufs, data_neufs)
Date_neufs <- Date_neufs + 1
if (Date_neufs == 2030) break
Sys.sleep(1)  # Pause de 1 seconde entre les requêtes
}
df_neufs$type_logement <- "Neufs"
df_neufs$Année_construction <- NA
}
# Fusionner les données si l'utilisateur a choisi "les deux"
if (type_logement == "les deux") {
df_logement <- rbind(df_existants, df_neufs)
} else if (type_logement == "ancien") {
df_logement <- df_existants
} else {
df_logement <- df_neufs
}
# Nettoyage des données
df_logement <- df_logement[!is.na(df_logement$`Coordonnée_cartographique_X_(BAN)`) &
!is.na(df_logement$`Coordonnée_cartographique_Y_(BAN)`), ]
# Calcul de la répartition des types d'installation de chauffage
kpi_chauffage <- df_logement %>%
group_by(Type_installation_chauffage) %>%
summarise(count = n()) %>%
mutate(percentage = round((count / sum(count)) * 100, 2)) %>%
arrange(desc(count))
print(kpi_chauffage)
# Visualisation de la répartition par type d'installation de chauffage
ggplot(kpi_chauffage, aes(x = reorder(Type_installation_chauffage, -count), y = percentage, fill = Type_installation_chauffage)) +
geom_bar(stat = "identity") +
coord_flip() +  # Pour un graphique horizontal
theme_minimal() +
labs(title = "Répartition des types d'installation de chauffage",
y = "Pourcentage", x = "Type d'installation de chauffage") +
theme(legend.position = "none")
colors_dpe <- c(
"A" = "#006400",
"B" = "#32CD32",
"C" = "#ADFF2F",
"D" = "#FFD700",
"E" = "#FFA500",
"F" = "#FF8C00",
"G" = "#FF0000")
# Calcul des KPI pour les étiquettes DPE
kpi_dpe <- df_logement %>%
group_by(Etiquette_DPE) %>%
summarise(count = n()) %>%
arrange(desc(count))
kpi_dpe$Etiquette_DPE <- factor(kpi_dpe$Etiquette_DPE, levels = c("G", "F", "E", "D", "C", "B", "A"))
# Visualisation avec barres horizontales
ggplot(kpi_dpe, aes(x = Etiquette_DPE, y = count, fill = Etiquette_DPE)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = colors_dpe) +
coord_flip() +  # Faire en sorte que les barres soient horizontales
theme_minimal() +
labs(title = "Distribution des étiquettes DPE", y = "Nombre de logements", x = "Etiquette DPE")
# Graphique à barres empilées pour comparer les étiquettes DPE
ggplot(df_logement, aes(x = Etiquette_DPE, fill = type_logement)) +
geom_bar(position = "dodge") +
theme_minimal() +
labs(title = "Comparaison des étiquettes DPE entre les logements existants et neufs",
x = "Etiquette DPE",
y = "Nombre de logements",
fill = "Type de logement") +
theme(legend.position = "right")
kpi_type <- df_logement %>%
group_by(type_logement) %>%
summarise(count = n())
ggplot(kpi_type, aes(x = type_logement, y = count, fill = type_logement)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Répartition des logements par type", y = "Nombre de logements", x = "")
# Calcul de la répartition des types d'installation de chauffage
kpi_chauffage <- df_logement %>%
group_by(Type_installation_chauffage) %>%
summarise(count = n()) %>%
mutate(percentage = round((count / sum(count)) * 100, 2)) %>%
arrange(desc(count))
#Affichage des pourcentages
print(kpi_chauffage)
# Visualisation de la répartition par type d'installation de chauffage
ggplot(kpi_chauffage, aes(x = reorder(Type_installation_chauffage, -count), y = percentage, fill = Type_installation_chauffage)) +
geom_bar(stat = "identity") +
coord_flip() +  # Pour un graphique horizontal
theme_minimal() +
labs(title = "Répartition des types d'installation de chauffage",
y = "Pourcentage", x = "Type d'installation de chauffage") +
theme(legend.position = "none")
# Créer un nuage de points pour la surface habitable en fonction de l'étiquette DPE
ggplot(df_logement, aes(x = Etiquette_DPE,
y = Surface_habitable_logement,
color = Type_bâtiment)) +
geom_point(alpha = 0.6, size = 2) +  # alpha pour la transparence, size pour la taille des points
theme_minimal() +
labs(title = "Nuage de Points: Surface Habitable par Type de Bâtiment",
x = "Étiquette DPE",
y = "Surface Habitable (m²)",
color = "Type de Bâtiment") +
theme(legend.position = "right")  # Positionner la légende à droite
df_logement_clean <- df_logement %>%
filter(!is.na(Etiquette_DPE) & !is.na(Surface_habitable_logement))
df_logement_clean$Etiquette_DPE <- factor(df_logement_clean$Etiquette_DPE,
levels = c("A", "B", "C", "D", "E", "F", "G"))
# Créer un nuage de points pour la surface habitable en fonction de l'étiquette DPE
ggplot(df_logement_clean, aes(x = Etiquette_DPE,
y = Surface_habitable_logement,
color = Type_bâtiment)) +
geom_point(alpha = 0.6, size = 2) +  # alpha pour la transparence, size pour la taille des points
theme_minimal() +
labs(title = "Nuage de Points: Surface Habitable par Type de Bâtiment",
x = "Étiquette DPE",
y = "Surface Habitable (m²)",
color = "Type de Bâtiment") +
theme(legend.position = "right")  # Positionner la légende à droite
