Sys.sleep(2)
}
# Pour logements neufs
repeat {
params <- list(
page = 1,
size = size,
select = "N°DPE,Etiquette_DPE,Date_réception_DPE,Coordonnée_cartographique_Y_(BAN),Coordonnée_cartographique_X_(BAN),Identifiant__BAN",
q = code_postal,
q_fields = "Code_postal_(BAN)",
qs = paste0("Date_réception_DPE:[", Date_neufs, "-01-01 TO ", Date_neufs, "-12-31]")
)
url_encoded <- modify_url(base_url_neufs, query = params)
response <- GET(url_encoded, timeout(60))
if (status_code(response) != 200) {
stop("Erreur dans la requête : ", status_code(response))
}
content <- fromJSON(rawToChar(response$content), flatten = FALSE)
data <- content$result
df_neufs <- rbind(df_neufs, data)
Date_neufs <- Date_neufs + 1
if (Date_neufs == 2030) {
break
}
Sys.sleep(2)
}
df_existants$type_logement <- "Existant"
df_neufs$type_logement <- "Neufs"
df_logement <- rbind(df_existants, df_neufs)
df_logement <- df_logement[!is.na(df_logement$'Coordonnée_cartographique_X_(BAN)') &
!is.na(df_logement$'Coordonnée_cartographique_Y_(BAN)'), ]
# Interface utilisateur (UI)
ui <- dashboardPage(
dashboardHeader(title = "Logements en Savoie"),
dashboardSidebar(
sidebarMenu(
menuItem("Cartographie", tabName = "cartography", icon = icon("map")),
menuItem("Informations", tabName = "info", icon = icon("info-circle")),
menuItem("Données", tabName = "data", icon = icon("table"))
)
),
dashboardBody(
tabItems(
# Carte des logements
tabItem(tabName = "cartography",
leafletOutput("Savoie_map", height = "600px")
),
# Onglet Information
tabItem(tabName = "info",
h2("Informations sur les logements"),
p("Détails supplémentaires et analyses générales sur les logements.")
),
# Onglet Données
tabItem(tabName = "data",
h2("Analyse des données"),
plotOutput("scatter_plot")
)
)
)
)
# Serveur
server <- function(input, output, session) {
# Carte Leaflet
output$Savoie_map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addMarkers(
lng = df_logement$Coordonnée_cartographique_X_(BAN),
lat = df_logement$Coordonnée_cartographique_Y_(BAN),
popup = paste("Logement ID:", df_logement$`N°DPE`, "<br>",
"Etiquette DPE:", df_logement$Etiquette_DPE, "<br>",
"Date de réception DPE:", df_logement$Date_réception_DPE)
) %>%
setView(lng = 5.9162, lat = 45.6884, zoom = 8)
})
# Nuage de points pour l'onglet Données
output$scatter_plot <- renderPlot({
ggplot(df_logement, aes(x = `Coordonnée_cartographique_X_(BAN)`, y = `Coordonnée_cartographique_Y_(BAN)`, color = type_logement)) +
geom_point() +
labs(title = "Répartition des logements (existants vs neufs)", x = "Longitude", y = "Latitude") +
theme_minimal()
})
}
# Lancer l'application
shinyApp(ui = ui, server = server)
# Installer et charger les packages nécessaires
install.packages(c('shiny', 'leaflet', 'shinydashboard', 'httr', 'jsonlite', 'ggplot2'))
library(shiny)
library(leaflet)
library(shinydashboard)
library(httr)
library(jsonlite)
library(ggplot2)
# Lecture du fichier CSV local
adresse <- read.csv(file = "adresses-73.csv", header = TRUE, sep = ";", dec = ".")
# Variables et URLs API
code_postal <- "73*"
size <- 10000
df_existants <- data.frame()
df_neufs <- data.frame()
Date_existants <- 2021
Date_neufs <- 2021
base_url_existants <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
base_url_neufs <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-neufs/lines"
# Récupération des données depuis l'API
# Pour logements existants
repeat {
params <- list(
page = 1,
size = size,
select = "N°DPE,Etiquette_DPE,Date_réception_DPE,Coordonnée_cartographique_Y_(BAN),Coordonnée_cartographique_X_(BAN),Identifiant__BAN",
q = code_postal,
q_fields = "Code_postal_(BAN)",
qs = paste0("Date_réception_DPE:[", Date_existants, "-01-01 TO ", Date_existants, "-12-31]")
)
url_encoded <- modify_url(base_url_existants, query = params)
response <- GET(url_encoded, timeout(60))
if (status_code(response) != 200) {
stop("Erreur dans la requête : ", status_code(response))
}
content <- fromJSON(rawToChar(response$content), flatten = FALSE)
data <- content$result
df_existants <- rbind(df_existants, data)
Date_existants <- Date_existants + 1
if (Date_existants == 2030) {
break
}
Sys.sleep(2)
}
# Pour logements neufs
repeat {
params <- list(
page = 1,
size = size,
select = "N°DPE,Etiquette_DPE,Date_réception_DPE,Coordonnée_cartographique_Y_(BAN),Coordonnée_cartographique_X_(BAN),Identifiant__BAN",
q = code_postal,
q_fields = "Code_postal_(BAN)",
qs = paste0("Date_réception_DPE:[", Date_neufs, "-01-01 TO ", Date_neufs, "-12-31]")
)
url_encoded <- modify_url(base_url_neufs, query = params)
response <- GET(url_encoded, timeout(60))
if (status_code(response) != 200) {
stop("Erreur dans la requête : ", status_code(response))
}
content <- fromJSON(rawToChar(response$content), flatten = FALSE)
data <- content$result
df_neufs <- rbind(df_neufs, data)
Date_neufs <- Date_neufs + 1
if (Date_neufs == 2030) {
break
}
Sys.sleep(2)
}
df_existants$type_logement <- "Existant"
df_neufs$type_logement <- "Neufs"
df_logement <- rbind(df_existants, df_neufs)
df_logement <- df_logement[!is.na(df_logement$'Coordonnée_cartographique_X_(BAN)') &
!is.na(df_logement$'Coordonnée_cartographique_Y_(BAN)'), ]
# Interface utilisateur (UI)
ui <- dashboardPage(
dashboardHeader(title = "Logements en Savoie"),
dashboardSidebar(
sidebarMenu(
menuItem("Cartographie", tabName = "cartography", icon = icon("map")),
menuItem("Informations", tabName = "info", icon = icon("info-circle")),
menuItem("Données", tabName = "data", icon = icon("table"))
)
),
dashboardBody(
tabItems(
# Carte des logements
tabItem(tabName = "cartography",
leafletOutput("Savoie_map", height = "600px")
),
# Onglet Information
tabItem(tabName = "info",
h2("Informations sur les logements"),
p("Détails supplémentaires et analyses générales sur les logements.")
),
# Onglet Données
tabItem(tabName = "data",
h2("Analyse des données"),
plotOutput("scatter_plot")
)
)
)
)
# Serveur
server <- function(input, output, session) {
# Carte Leaflet
output$Savoie_map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addMarkers(
lng = df_logement$'Coordonnée_cartographique_X_(BAN)',
lat = df_logement$'Coordonnée_cartographique_Y_(BAN)',
popup = paste("Logement ID:", df_logement$`N°DPE`, "<br>",
"Etiquette DPE:", df_logement$Etiquette_DPE, "<br>",
"Date de réception DPE:", df_logement$Date_réception_DPE)
) %>%
setView(lng = 5.9162, lat = 45.6884, zoom = 8)
})
# Nuage de points pour l'onglet Données
output$scatter_plot <- renderPlot({
ggplot(df_logement, aes(x = `Coordonnée_cartographique_X_(BAN)`, y = `Coordonnée_cartographique_Y_(BAN)`, color = type_logement)) +
geom_point() +
labs(title = "Répartition des logements (existants vs neufs)", x = "Longitude", y = "Latitude") +
theme_minimal()
})
}
# Lancer l'application
shinyApp(ui = ui, server = server)
install.packages(c("shiny", "leaflet", "shinydashboard", "httr", "jsonlite", "ggplot2"))
---
title: "Analyse des Logements Neufs et Anciens"
# Installer et charger les packages nécessaires
#install.packages(c('shiny', 'leaflet', 'shinydashboard', 'httr', 'jsonlite', 'ggplot2'))
library(shiny)
library(leaflet)
library(shinydashboard)
library(httr)
library(jsonlite)
library(ggplot2)
# Lecture du fichier CSV local
adresse <- read.csv(file = "adresses-73.csv", header = TRUE, sep = ";", dec = ".")
# Variables et URLs API
code_postal <- "73*"
size <- 10000
df_existants <- data.frame()
df_neufs <- data.frame()
Date_existants <- 2021
Date_neufs <- 2021
base_url_existants <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
base_url_neufs <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-neufs/lines"
# Récupération des données depuis l'API
# Pour logements existants
repeat {
params <- list(
page = 1,
size = size,
select = "N°DPE,Etiquette_DPE,Date_réception_DPE,Coordonnée_cartographique_Y_(BAN),Coordonnée_cartographique_X_(BAN),Identifiant__BAN",
q = code_postal,
q_fields = "Code_postal_(BAN)",
qs = paste0("Date_réception_DPE:[", Date_existants, "-01-01 TO ", Date_existants, "-12-31]")
)
url_encoded <- modify_url(base_url_existants, query = params)
response <- GET(url_encoded, timeout(60))
if (status_code(response) != 200) {
stop("Erreur dans la requête : ", status_code(response))
}
content <- fromJSON(rawToChar(response$content), flatten = FALSE)
data <- content$result
df_existants <- rbind(df_existants, data)
Date_existants <- Date_existants + 1
if (Date_existants == 2030) {
break
}
Sys.sleep(2)
}
# Pour logements neufs
repeat {
params <- list(
page = 1,
size = size,
select = "N°DPE,Etiquette_DPE,Date_réception_DPE,Coordonnée_cartographique_Y_(BAN),Coordonnée_cartographique_X_(BAN),Identifiant__BAN",
q = code_postal,
q_fields = "Code_postal_(BAN)",
qs = paste0("Date_réception_DPE:[", Date_neufs, "-01-01 TO ", Date_neufs, "-12-31]")
)
url_encoded <- modify_url(base_url_neufs, query = params)
response <- GET(url_encoded, timeout(60))
if (status_code(response) != 200) {
stop("Erreur dans la requête : ", status_code(response))
}
content <- fromJSON(rawToChar(response$content), flatten = FALSE)
data <- content$result
df_neufs <- rbind(df_neufs, data)
Date_neufs <- Date_neufs + 1
if (Date_neufs == 2030) {
break
}
Sys.sleep(2)
}
df_existants$type_logement <- "Existant"
df_neufs$type_logement <- "Neufs"
df_logement <- rbind(df_existants, df_neufs)
df_logement <- df_logement[!is.na(df_logement$'Coordonnée_cartographique_X_(BAN)') &
!is.na(df_logement$'Coordonnée_cartographique_Y_(BAN)'), ]
# Interface utilisateur (UI)
ui <- dashboardPage(
dashboardHeader(title = "Logements en Savoie"),
dashboardSidebar(
sidebarMenu(
menuItem("Cartographie", tabName = "cartography", icon = icon("map")),
menuItem("Informations", tabName = "info", icon = icon("info-circle")),
menuItem("Données", tabName = "data", icon = icon("table"))
)
),
dashboardBody(
tabItems(
# Carte des logements
tabItem(tabName = "cartography",
leafletOutput("Savoie_map", height = "600px")
),
# Onglet Information
tabItem(tabName = "info",
h2("Informations sur les logements"),
p("Détails supplémentaires et analyses générales sur les logements.")
),
# Onglet Données
tabItem(tabName = "data",
h2("Analyse des données"),
plotOutput("scatter_plot")
)
)
)
)
# Serveur
server <- function(input, output, session) {
# Carte Leaflet
output$Savoie_map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addMarkers(
lng = df_logement$'Coordonnée_cartographique_X_(BAN)',
lat = df_logement$'Coordonnée_cartographique_Y_(BAN)',
popup = paste("Logement ID:", df_logement$`N°DPE`, "<br>",
"Etiquette DPE:", df_logement$Etiquette_DPE, "<br>",
"Date de réception DPE:", df_logement$Date_réception_DPE)
) %>%
setView(lng = 5.9162, lat = 45.6884, zoom = 8)
})
# Nuage de points pour l'onglet Données
output$scatter_plot <- renderPlot({
ggplot(df_logement, aes(x = `Coordonnée_cartographique_X_(BAN)`, y = `Coordonnée_cartographique_Y_(BAN)`, color = type_logement)) +
geom_point() +
labs(title = "Répartition des logements (existants vs neufs)", x = "Longitude", y = "Latitude") +
theme_minimal()
})
}
# Lancer l'application
shinyApp(ui = ui, server = server)
# Installer et charger les packages nécessaires
#install.packages(c('shiny', 'leaflet', 'shinydashboard', 'httr', 'jsonlite', 'ggplot2'))
library(shiny)
library(leaflet)
library(shinydashboard)
library(httr)
library(jsonlite)
library(ggplot2)
# Lecture du fichier CSV local
adresse <- read.csv(file = "adresses-73.csv", header = TRUE, sep = ";", dec = ".")
# Variables et URLs API
code_postal <- "73*"
size <- 10000
df_existants <- data.frame()
df_neufs <- data.frame()
Date_existants <- 2021
Date_neufs <- 2021
base_url_existants <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
base_url_neufs <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-neufs/lines"
# Récupération des données depuis l'API
# Pour logements existants
repeat {
params <- list(
page = 1,
size = size,
select = "N°DPE,Etiquette_DPE,Date_réception_DPE,Coordonnée_cartographique_Y_(BAN),Coordonnée_cartographique_X_(BAN),Identifiant__BAN",
q = code_postal,
q_fields = "Code_postal_(BAN)",
qs = paste0("Date_réception_DPE:[", Date_existants, "-01-01 TO ", Date_existants, "-12-31]")
)
url_encoded <- modify_url(base_url_existants, query = params)
response <- GET(url_encoded, timeout(60))
if (status_code(response) != 200) {
stop("Erreur dans la requête : ", status_code(response))
}
content <- fromJSON(rawToChar(response$content), flatten = FALSE)
data <- content$result
df_existants <- rbind(df_existants, data)
Date_existants <- Date_existants + 1
if (Date_existants == 2030) {
break
}
Sys.sleep(2)
}
# Pour logements neufs
repeat {
params <- list(
page = 1,
size = size,
select = "N°DPE,Etiquette_DPE,Date_réception_DPE,Coordonnée_cartographique_Y_(BAN),Coordonnée_cartographique_X_(BAN),Identifiant__BAN",
q = code_postal,
q_fields = "Code_postal_(BAN)",
qs = paste0("Date_réception_DPE:[", Date_neufs, "-01-01 TO ", Date_neufs, "-12-31]")
)
url_encoded <- modify_url(base_url_neufs, query = params)
response <- GET(url_encoded, timeout(60))
if (status_code(response) != 200) {
stop("Erreur dans la requête : ", status_code(response))
}
content <- fromJSON(rawToChar(response$content), flatten = FALSE)
data <- content$result
df_neufs <- rbind(df_neufs, data)
Date_neufs <- Date_neufs + 1
if (Date_neufs == 2030) {
break
}
Sys.sleep(2)
}
df_existants$type_logement <- "Existant"
df_neufs$type_logement <- "Neufs"
df_logement <- rbind(df_existants, df_neufs)
df_logement <- df_logement[!is.na(df_logement$'Coordonnée_cartographique_X_(BAN)') &
!is.na(df_logement$'Coordonnée_cartographique_Y_(BAN)'), ]
# Transformation des coordonnées en numérique pour les deux dataframes
df_logement$'Coordonnée_cartographique_X_(BAN)' <- as.numeric(df_logement$'Coordonnée_cartographique_X_(BAN)')
df_logement$'Coordonnée_cartographique_Y_(BAN)' <- as.numeric(df_logement$'Coordonnée_cartographique_Y_(BAN)')
adresse$lon <- as.numeric(adresse$lon)
adresse$lat <- as.numeric(adresse$lat)
# Jointure entre df_logement et adresse sur les colonnes de coordonnées
df_principale <- merge(df_logement, adresse,
by.x = c("Coordonnée_cartographique_X_(BAN)", "Coordonnée_cartographique_Y_(BAN)"),
by.y = c("lon", "lat"),
all.x = TRUE)
# Interface utilisateur (UI)
ui <- dashboardPage(
dashboardHeader(title = "Logements en Savoie"),
dashboardSidebar(
sidebarMenu(
menuItem("Cartographie", tabName = "cartography", icon = icon("map")),
menuItem("Informations", tabName = "info", icon = icon("info-circle")),
menuItem("Données", tabName = "data", icon = icon("table"))
)
),
dashboardBody(
tabItems(
# Carte des logements
tabItem(tabName = "cartography",
leafletOutput("Savoie_map", height = "600px")
),
# Onglet Information
tabItem(tabName = "info",
h2("Informations sur les logements"),
p("Détails supplémentaires et analyses générales sur les logements.")
),
# Onglet Données
tabItem(tabName = "data",
h2("Analyse des données"),
plotOutput("scatter_plot")
)
)
)
)
# Serveur
server <- function(input, output, session) {
# Carte Leaflet
output$Savoie_map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addMarkers(
lng = df_logement$'Coordonnée_cartographique_X_(BAN)',
lat = df_logement$'Coordonnée_cartographique_Y_(BAN)',
popup = paste("Logement ID:", df_logement$`N°DPE`, "<br>",
"Etiquette DPE:", df_logement$Etiquette_DPE, "<br>",
"Date de réception DPE:", df_logement$Date_réception_DPE)
) %>%
setView(lng = 5.9162, lat = 45.6884, zoom = 8)
})
# Nuage de points pour l'onglet Données
output$scatter_plot <- renderPlot({
ggplot(df_logement, aes(x = `Coordonnée_cartographique_X_(BAN)`, y = `Coordonnée_cartographique_Y_(BAN)`, color = type_logement)) +
geom_point() +
labs(title = "Répartition des logements (existants vs neufs)", x = "Longitude", y = "Latitude") +
theme_minimal()
})
}
# Lancer l'application
shinyApp(ui = ui, server = server)
---
title: "Rapport d'étude RMarkdown"
knitr::opts_chunk$set(echo = TRUE)
library(httr)
library(jsonlite)
library(dplyr)
code_postal <- "73*"
size <- 10000  # Taille des paquets
df_existants <- data.frame()  # Dataframe pour stocker les résultats des logements existants
Date_existants <- 2021  # Filtrer à partir de cette date
base_url_existants <- "https://data.ademe.fr/data-fair/api/v1/datasets/dpe-v2-logements-existants/lines"
repeat {
params <- list(
page = 1,
size = size,
select = "N°DPE,Etiquette_DPE,Date_réception_DPE,Coordonnée_cartographique_Y_(BAN),Coordonnée_cartographique_X_(BAN),Identifiant__BAN",
q = code_postal,
q_fields = "Code_postal_(BAN)",
qs = paste0("Date_réception_DPE:[", Date_existants, "-01-01 TO ", Date_existants, "-12-31]")
)
url_encoded <- modify_url(base_url_existants, query = params)
response <- GET(url_encoded)
if (status_code(response) != 200) {
stop("Erreur dans la requête : ", status_code(response))
}
content <- fromJSON(rawToChar(response$content), flatten = FALSE)
data <- content$result
df_existants <- rbind(df_existants, data)
Date_existants <- Date_existants + 1
if (Date_existants == 2030) break
Sys.sleep(1)  # Pause de 1 seconde entre les requêtes
}
df_existants$type_logement <- "Existant"
